MODULE main

VAR
 r : reader(t1,t2,t3,t4,t5,t6);
 t1: tag(r,0ub8_0000_0000,3);
 t2: tag(r,0ub8_0000_0001,3);
 t3: tag(r,0ub8_0000_0010,3);
 t4: tag(r,0ub8_0000_0011,3);
 t5: tag(r,0ub8_0000_0100,3);
 t6: tag(r,0ub8_0000_0111,3);

-- verifichiamo se tutti gli stati dei tag
-- sono raggiungibili

/--CTLSPEC
EF(r.state=collision)
CTLSPEC
EF(r.state=single)--/
CTLSPEC
AG(EF(r.state=idle))
/--CTLSPEC
EF(r.state=end)
CTLSPEC
AG(EF(r.state=end))--/

-- tags
/--CTLSPEC
EF(t1.state=transmit)
CTLSPEC
AG!(t2.state=transmit)
CTLSPEC
EF(t3.state=transmit)
CTLSPEC
EF(t4.state=transmit)--/

-- hard test
/--CTLSPEC
AG((r.b=0ub2_00) -> AF(t1.state=single))
CTLSPEC
AG((r.b=0ub2_01) -> AF(t2.state=single))
CTLSPEC
AG((r.b=0ub2_10) -> AF(t3.state=single))
CTLSPEC
AG((r.b=0ub2_11) -> AF(t4.state=single))--/

CTLSPEC
AG((r.c=0ub3_000) -> AF(t1.state=end))
CTLSPEC
AG((r.c=0ub3_001) -> AF(t2.state=end))
CTLSPEC
AG((r.c=0ub3_010) -> AF(t3.state=end))
CTLSPEC
AG((r.c=0ub3_011) -> AF(t4.state=end))

CTLSPEC
AG((r.b=0ub2_10) -> AF(t5.state=end))
CTLSPEC
AG((r.b=0ub2_11) -> AF(t6.state=end))

CTLSPEC
AG((r.b=0ub2_11) -> AF(r.bit=-1))

CTLSPEC
AG((r.bit=-1) -> AF(r.state=end))


-- verifichiamo se il reader rimane in deadlock
-- in una particolare configurazione

MODULE reader(t1,t2,t3,t4,t5,t6)

VAR
 continue: boolean;
 bit     : -1..8;
 a       : unsigned word[1];
 b       : unsigned word[2];
 c       : unsigned word[3];
 state   : {transmit,receive,idle,collision_bit,
            collision,single_bit,single,end};


-- collision detection
DEFINE 
  k := count((t1.state=transmit),(t2.state=transmit),
             (t3.state=transmit),(t4.state=transmit),
             (t5.state=transmit),(t6.state=transmit)); 

ASSIGN

    init(continue) := TRUE;
    next(continue) := 
        case
           state=end : FALSE;
           TRUE : continue;
        esac;

    init(a) := 0ub1_0;
    next(a) := 
        case
           (bit=1) & (state=collision)                     : 0ub1_0;
           (bit=2) & (state=single) & (resize(b,1)=0ub1_1) : 0ub1_1;
           (bit=1) & (state=single) & (a=0ub1_0)           : 0ub1_1;
           TRUE : a;
        esac;
    
    init(b) := 0ub2_00;
    next(b) := 
        case
           (bit=2) & (state=collision)                     : a :: 0ub1_0;
           (bit=3) & (state=single) & (resize(c,1)=0ub1_1) : resize(c >> 1,2);
           (bit=2) & (state=single) & (resize(b,1)=0ub1_0) : resize(b >> 1,1) :: 0ub1_1;
           TRUE : b;
        esac;
    
    init(c) := 0ub3_000;
    next(c) := 
        case
           (bit=3) & (state=collision)                     : b :: 0ub1_0;
           (bit=3) & (state=single) & (resize(c,1)=0ub1_0) : resize(c >> 1,2) :: 0ub1_1;
           TRUE : c;
        esac;

    init(bit) := 0;
    next(bit) :=
        case
          -- collision
          (state=collision_bit) & (bit=0)                     :  1;
          (state=collision_bit) & (bit=1)                     :  2; 
          (state=collision_bit) & (bit=2)                     :  3;
          -- single
          -- implementazione alternativa...
          (t1.state=end) & (t2.state=end) & (t3.state=end) &
          (t4.state=end) & (t5.state=end) & (t6.state=end)    : -1;
       -- (state=single_bit) & (bit=2) & (b=0ub2_11)          : -1;
          (state=single_bit) & (bit=1) & (a=0ub1_0)           :  1;
          (state=single_bit) & (bit=2) & (resize(b,1)=0ub1_1) :  1;
          (state=single_bit) & (bit=2) & (resize(b,1)=0ub1_0) :  2;
          (state=single_bit) & (bit=3) & (resize(c,1)=0ub1_1) :  2;
          (state=single_bit) & (bit=3) & (resize(c,1)=0ub1_0) :  3;
          TRUE : bit;
        esac;


    init(state) := transmit;
    next(state) :=
        case
          (continue=TRUE) & (state=transmit)                : receive;
          (k=0) & (state=receive)                           : idle;
          (k>=2) & ((state=receive) | (state=idle))         : collision_bit;
          (k=1) & ((state=receive) | (state=idle))          : single_bit;
          (state=collision_bit)                             : collision;
          (state=single_bit)                                : single;
          (bit=-1) & ((state=idle) | (state=single))        : end;
          (state=idle) | (state=collision) | (state=single) : transmit;
          TRUE : state;
        esac;


MODULE tag(r,address,s_bit)

VAR
 continue : boolean;
 confirm  : boolean;
 state    : {receive,transmit,collision,single,end};
 

ASSIGN

    init(continue) := TRUE;
    next(continue) := 
        case
           state=end : FALSE;
           TRUE : continue;
        esac;


    init(confirm) := FALSE;
    next(confirm) :=
        case
           ((r.state=receive) & (r.bit=0)) |                                    
           ((r.state=receive) & (r.bit=1) & (r.a=resize(address >> (s_bit - (s_bit - 1)), 1))) | 
           ((r.state=receive) & (r.bit=2) & (r.b=resize(address >> (s_bit - (s_bit - 2)), 2))) | 
           ((r.state=receive) & (r.bit=3) & (r.c=resize(address >> (s_bit - (s_bit)),3)))      : TRUE;
           (r.state!=receive)                                                                  : FALSE;
           TRUE : confirm;
        esac; 
    
    --NOTE: s_bit indica il numero massimo di bit valutati. 
    --      Dunque, in r.bit=2 lo shift Ã¨ zero.
     
    init(state) := receive;   
    next(state) :=
        case
           (state=receive) & (confirm)            : transmit;
           (r.state=collision) & (state=transmit) : collision;
           (r.state=single) & (state=transmit)    : single;
           (state=collision)                      : receive;
           (state=single)                         : end;
           TRUE : state;
        esac;



    



 
