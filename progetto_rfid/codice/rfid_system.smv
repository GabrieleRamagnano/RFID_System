MODULE main

VAR
 r : reader(t1,t2,t3,t4);
 t1: tag(r,0ub8_0000_0000,2);
 t2: tag(r,0ub8_0000_0001,2);
 t3: tag(r,0ub8_0000_0010,2);
 t4: tag(r,0ub8_0000_0011,2);

-- verifichiamo se tutti gli stati dei tag
-- sono raggiungibili

CTLSPEC
EF(r.state=collision)
CTLSPEC
EF(r.state=single)
CTLSPEC
AG(EF(r.state=idle))
CTLSPEC
EF(r.state=end)
CTLSPEC
AG(EF(r.state=end))

-- tags
CTLSPEC
EF(t1.state=end)
CTLSPEC
EF(t2.state=end)
CTLSPEC
EF(t3.state=end)
CTLSPEC
EF(t4.state=end)

-- verifichiamo se il reader rimane in deadlock
-- in una particolare configurazione

MODULE reader(t1,t2,t3,t4)

VAR
 continue: boolean;
 bit     : -1..8;
 a       : unsigned word[1];
 b       : unsigned word[2];
 state   : {transmit,receive,idle,collision_bit,
            collision,single_bit,single,end};


-- collision detection
DEFINE 
  k := count((t1.state=transmit),(t2.state=transmit),
             (t3.state=transmit),(t4.state=transmit)); 

ASSIGN

    init(continue) := TRUE;
    next(continue) := 
        case
           state=end : FALSE;
           TRUE : continue;
        esac;

    init(a) := 0ub1_0;
    next(a) := 
        case
           (bit=1) & (state=collision)                     : 0ub1_0;
           (bit=2) & (state=single) & (resize(b,1)=0ub1_1) : 0ub1_1;
           (bit=1) & (state=single) & (a=0ub1_0)           : 0ub1_1;
           TRUE : a;
        esac;
    
    init(b) := 0ub2_00;
    next(b) := 
        case
           (bit=2) & (state=collision)                     : a :: 0ub1_0;
           (bit=2) & (state=single) & (resize(b,1)=0ub1_0) : resize(b >> 1,1) :: 0ub1_1;
           TRUE : b;
        esac;

    init(bit) := 0;
    next(bit) :=
        case
          -- collision
          (state=collision_bit) & (bit=0)                     :  1;
          (state=collision_bit) & (bit=1)                     :  2; 

          -- single
          (state=single_bit) & (bit=2) & (b=0ub2_11)          : -1;
          (state=single_bit) & (bit=1) & (a=0ub1_0)           :  1;
          (state=single_bit) & (bit=2) & (resize(b,1)=0ub1_1) :  1;
          (state=single_bit) & (bit=2) & (resize(b,1)=0ub1_0) :  2;
          TRUE : bit;
        esac;


    init(state) := transmit;
    next(state) :=
        case
          (continue=TRUE) & (state=transmit)                : receive;
          (k=0) & (state=receive)                           : idle;
          (k>=2) & ((state=receive) | (state=idle))         : collision_bit;
          (k=1) & ((state=receive) | (state=idle))          : single_bit;
          (state=collision_bit)                             : collision;
          (state=single_bit)                                : single;
          (bit=-1) & ((state=idle) | (state=single))        : end;
          (state=idle) | (state=collision) | (state=single) : transmit;
          TRUE : state;
        esac;


MODULE tag(r,address,s_bit)

VAR
 continue : boolean;
 confirm  : boolean;
 n        : 0..s_bit;  
 state    : {receive,transmit,collision,single,end};
 

ASSIGN

    init(continue) := TRUE;
    next(continue) := 
        case
           state=end : FALSE;
           TRUE : continue;
        esac;

    init(n) := 0;
    next(n) :=
        case
           (state=collision) & (n < s_bit) : n + 1;
           TRUE : n;
        esac;

   /-- init(confirm) := FALSE;
    next(confirm) :=
        case
           ((r.state=receive) & (r.bit=0)) |                                    
           ((r.state=receive) & (r.bit=1) & (r.a=resize(address >> (s_bit - n), 1))) | 
           ((r.state=receive) & (r.bit=2) & (r.b=resize(address >> (s_bit - n), 2))) : TRUE;
           (r.state!=receive)                                                        : FALSE;
           TRUE : confirm;
        esac; --/
     
    init(state) := receive;   
    next(state) :=
        case
           (state=receive) & (r.state=receive) & ((r.bit=0) |
           ((r.bit=1) & (r.a=resize(address >> (s_bit - n), 1))) |  
           ((r.bit=2) & (r.b=resize(address >> (s_bit - n), 2)))) : transmit;
           (r.state=collision) & (state=transmit)                 : collision;
           (r.state=single) & (state=transmit)                    : single;
           (state=collision)                                      : receive;
           (state=single)                                         : end;
           TRUE : state;
        esac;



    



 
