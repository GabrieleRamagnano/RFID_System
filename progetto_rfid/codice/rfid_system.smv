MODULE main

VAR
 r : reader(t1,t2);
 t1: tag(r,0);
 t2: tag(r,1);

MODULE reader(t1,t2)

VAR

 state   : {transmit,receive,idle,collision,single,end};
 address : {-1,0,1};
 continue: boolean;

ASSIGN

    init(continue) := TRUE;
    next(continue) := 
        case
           state=end : FALSE;
        esac;

    init(address) := -1;
    next(address) :=
        case
         (state=collision) : 0;
         (state=single) & (address=1) : -1;
         (state=single) & (address=0) : 1;
         TRUE : address;
        esac;

    init(state) := transmit;
    next(state) :=
        case
          (continue=TRUE) & (state=transmit) : receive;
          (k = 0) & (state=receive) : idle;
          (k = 2) & (state=receive) : collision;
          (K = 1) & (state=receive) : single;
          (state=idle) | (state=collision) | (state=single) : transmit;
          (state=single) & (address=-1) : end;
          TRUE : state;
        esac;

-- collision detection
DEFINE 
  k := ((t1.state=transmit) & (t2.state=transmit) )  ? 2 :
       ((t1.state=transmit) & (t2.state=end) )       ? 1 :
       ((t1.state=end) & (t2.state=transmit) )       ? 1 : 0;


MODULE tag(r,a)

VAR
 state   : {receive,transmit,collision,single,end};
 address : {-1,0,1};
 continue: boolean;

ASSIGN

    init(continue) := TRUE;
    next(continue) := 
        case
           state=end : FALSE;
        esac;

    init(address) := -1;
    next(address) :=
        case
          (state=collision) : a;
          TRUE : address;
        esac; 

    init(state) := receive;
    next(state) :=
        case
           (r.state=receive) & (r.address=address) & (state=receive): transmit;
           (k = 2) & (state=transmit) : collision;
           (k = 1) & (state=transmit) : single;
           (state=collision) : receive;
           (state=single) : end;
           TRUE : state;
        esac;




    



 


